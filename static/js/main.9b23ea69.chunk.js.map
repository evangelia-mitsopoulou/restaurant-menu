{"version":3,"sources":["components/molecules/CourseCard/CourseCard.jsx","components/organisms/CoursesCardList/CoursesCardList.jsx","components/molecules/MenuSelector/MenuSelector.jsx","components/molecules/NavigatorBar/NavigatorBar.jsx","components/organisms/Results/Results.jsx","components/molecules/AllergyInfo/AllergyInfo.jsx","App.js","serviceWorker.js","index.js"],"names":["CourseCard","array","spicyArray","length","Array","fill","arr","this","props","spicyLevel","setSpicyIcons","react_default","a","createElement","Card","onClick","key","id","allergy","CardActionArea","CardMedia","className","image","CardContent","Typography","gutterBottom","variant","cardTitle","color","component","description","CardActions","Info","map","e","i","Whatshot","React","Component","CoursesCardList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_this","filteredCourses","CoursesData","filter","data","courseType","activeMenu","Grid","container","alignItems","spacing","response","molecules_CourseCard_CourseCard","title","allery","spiceLevel","MenuSelector","FormControl","RadioGroup","MenuCategories","FormControlLabel","checked","disabled","value","menu","control","Radio","label","NavigatorBar","Button","activeButton","menus","0","1","2","3","4","5","Results","renderResultTitle","item","f","_this2","selectedCourses","values","toConsumableArray","res","resultsData","indexOf","flag","k","AllergyInfo","list","from","App","state","Map","allergyList","Set","showResults","handleNextButtonClick","bind","assertThisInitialized","handleSelectedCourseItems","persist","setState","prevState","_this3","parseInt","currentTarget","getAttribute","previousArr","concatArr","split","push","get","concat","set","setAllergyList","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","ingredient","add","err","return","console","log","MenuSelector_MenuSelector","organisms_CoursesCardList_CoursesCardList","molecules_NavigatorBar_NavigatorBar","AllergyInfo_AllergyInfo","organisms_Results_Results","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b23ea69.chunk.js","sourcesContent":["import React from 'react';\nimport './courseCard.scss';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport { Whatshot, Info } from '@material-ui/icons';\nimport Typography from '@material-ui/core/Typography';\n\n\n\nclass CourseCard extends React.Component{\n  \n  setSpicyIcons(array){\n    let spicyArray;\n    switch (array.length) {\n      case 1:\n        spicyArray = new Array(1).fill(1);\n        break;\n      case 2:\n      case 3:\n        spicyArray = new Array(2).fill(2);\n        break; \n      case 4:\n        spicyArray = new Array(3).fill(3);\n        break;\n      default:\n        spicyArray = [];\n    }\n    return spicyArray;\n  }\n\n  render(){\n\n    const arr = new Array(this.props.spicyLevel);\n    const spicyArray = this.setSpicyIcons(arr);\n  \n    return (\n      <Card onClick={this.props.onClick} key={this.props.id} id={this.props.id} allergy={this.props.allergy}>\n        <CardActionArea>\n         <CardMedia className= 'course-card__media' image={this.props.image}></CardMedia>\n          <CardContent> \n          <Typography gutterBottom variant=\"h5\"> {this.props.cardTitle}</Typography>\n          <Typography className=\"block-with-text\" gutterBottom variant=\"body2\" color=\"textSecondary\" component=\"p\"> {this.props.description}</Typography>    \n          </CardContent> \n          </CardActionArea>\n          <CardActions>\n          <div className=\"allergy\">\n          { this.props.allergy.length > 0 &&\n          <Info></Info>}\n          <Typography gutterBottom variant=\"subtitle2\" color=\"textSecondary\" component=\"p\"> {this.props.allergy}</Typography>    \n          </div>\n          <div className=\"spicy\"> \n            {spicyArray.map((e,i)=>{\n              return  <Whatshot key={i}></Whatshot> \n            })}    \n            </div>  \n          </CardActions>\n      </Card>\n    );\n  }\n}\n\nexport default CourseCard;","import React from 'react';\nimport './coursesCardList.scss';\nimport Grid from '@material-ui/core/Grid';\nimport CourseCard from '../../molecules/CourseCard/CourseCard.jsx';\nimport CoursesData from '../../../data/courses.json';\n\n\nclass CoursesCardList extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n    \n    render() {\n        \n        const filteredCourses = CoursesData.filter(data => data.courseType == this.props.activeMenu)\n\n        return (\n            <Grid\n                container\n                alignItems=\"center\"\n                spacing={1}\n            >\n                {filteredCourses.map((response) => {\n                    return <CourseCard\n                        key={response.id}\n                        id={response.id}\n                        image={response.image}\n                        cardTitle={response.title}\n                        description={response.description}\n                        allergy={response.allery}\n                        onClick={this.props.onClick}\n                        spicyLevel={response.spiceLevel}\n                    />\n                })}\n            </Grid>\n        );\n    }\n}\n\nexport default CoursesCardList;\n","import React from 'react';\nimport './menuSelector.scss';\nimport MenuCategories from '../../../data/menus.json';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\n\nfunction MenuSelector(props) {\n  return (\n    <FormControl component=\"fieldset\">\n\n    <RadioGroup>\n      {MenuCategories.map((response,i)=>{\n        return <FormControlLabel key={response.id} checked={response.id == props.activeMenu} disabled={response.id !== props.activeMenu} value={response.menu} control={<Radio />} label={response.menu} />\n      })}\n      </RadioGroup>\n      </FormControl>\n  );\n}\n\nexport default MenuSelector;\n","import React from 'react';\nimport './navigatorBar.scss';\nimport Button from '@material-ui/core/Button';\n\n\nclass NavigatorBar extends React.Component {\n\n    render(){\n        return (\n            <div className='navigator-container'>\n                <Button disabled={this.props.activeButton === false} variant=\"contained\" color=\"primary\" onClick={this.props.onClick}>\n                    Next step\n                 </Button>\n            </div>\n        );\n    }   \n}\n\nexport default NavigatorBar;","import React from 'react';\nimport './results.scss';\nimport CoursesData from '../../../data/courses.json';\n\n\nconst menus = {\n  0: \"Hors d'oeuvres\",\n  1: \"Soup\",\n  2: \"Fish\",\n  3: \"Salad\",\n  4: \"Main Course\",\n  5: \"Dessert\"\n}\n\nclass Results extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  renderResultTitle = (item,f) => {\n    return (<span key={item.id}>{item.title} {f ? ',' : ' ' } </span>);\n  }\n\n  render() {\n\n    const selectedCourses = this.props.selectedCourses;\n    const values = [...selectedCourses.values()];\n  \n    return (\n      <div className=\"results-container\">\n        {values.map((res, i) => {\n            const resultsData = CoursesData.filter(data => res.indexOf(data.id) !== -1);\n            let flag = true;\n            if (resultsData.length > 0)\n            return (\n              <div key={i}>\n                <h3>{menus[resultsData[0].courseType]} </h3>\n                {resultsData.map((item,k) => {\n                  if (k === resultsData.length-1) flag = false;\n                  return this.renderResultTitle(item,flag);\n                })}\n              </div>\n            )\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Results;","import React from 'react';\nimport './allergyInfo.scss';\n\n\nfunction AllergyInfo(props) {\n\n    const list = Array.from(props.list);\n\n    return (\n        <div className='allergy-container'>\n            <span><i> Allergic Ingredients: </i></span>\n            {list.map((response) => {\n                return <span><i>{response}</i>, </span>\n            })}\n        </div>\n    );\n\n\n}\n\nexport default AllergyInfo;","import React from 'react';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CoursesCardList from './components/organisms/CoursesCardList/CoursesCardList';\nimport MenuSelector from './components/molecules/MenuSelector/MenuSelector';\nimport NavigatorBar from './components/molecules/NavigatorBar/NavigatorBar';\nimport Button from '@material-ui/core/Button';\nimport MenuCategories from './data/menus.json';\nimport Results from './components/organisms/Results/Results';\nimport AllergyInfo from './components/molecules/AllergyInfo/AllergyInfo';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeMenu: 0,\n      selectedCourses: new Map(),\n      allergyList: new Set(),\n      showResults: 0,\n      activeButton: true\n    }\n    this.handleNextButtonClick = this.handleNextButtonClick.bind(this)\n    this.handleSelectedCourseItems = this.handleSelectedCourseItems.bind(this)\n  }\n\n  handleNextButtonClick(e) {\n    e.persist();\n    this.setState(prevState => {\n      return {\n        activeMenu: prevState.activeMenu + 1,\n        selectedCourses: this.state.selectedCourses,\n        showResults: this.state.activeMenu !== MenuCategories.length - 1 ? 0 : 1,\n        activeButton: this.state.activeMenu === 3 ? false : true\n      }\n    });\n  }\n\n\n  handleSelectedCourseItems(e) {\n\n    e.persist();\n    let id = parseInt(e.currentTarget.id),\n      allergy = e.currentTarget.getAttribute('allergy'),\n      arr = [], previousArr = [], concatArr = [];\n\n\n    // allergic in more than one ingredient convert string -> array\n\n    if (typeof allergy === 'string' && allergy.indexOf(',') !== -1) {\n      allergy = allergy.split(',');\n    }\n\n    arr.push(id);\n\n    this.setState((prevState) => {\n      previousArr = prevState.selectedCourses.get(this.state.activeMenu);\n      concatArr = typeof previousArr !== 'undefined' ? arr.concat(previousArr) : arr;\n      return {\n        selectedCourses: this.state.selectedCourses.set(this.state.activeMenu, concatArr),\n        activeButton: true,\n        allergyList: this.setAllergyList(prevState, allergy)\n      }\n    });\n  }\n\n  setAllergyList(prevState, allergy) {\n\n    let res;\n\n    if (typeof prevState !== 'undefined') {\n      if (typeof allergy !== 'undefined' && allergy.length > 0) {\n        if (typeof allergy === 'object') {\n          for (let ingredient of allergy) {\n            res = prevState.allergyList.add(ingredient);\n          }\n        }\n        if (typeof allergy === 'string') res = prevState.allergyList.add(allergy);\n      } else {\n        res = prevState.allergyList;\n      }\n    } else {\n      //it is the first time, there is no previous state and allergies\n\n      if (typeof allergy === \"string\" && allergy.length === 0) {\n        res = prevState.allergyList\n      } else {\n        res = allergy;\n      }\n    }\n\n    return res;\n\n  }\n\n  render() {\n    console.log('this.state', this.state);\n    return (\n      <div className=\"App\">\n        <MenuSelector activeMenu={this.state.activeMenu}></MenuSelector>\n        <CoursesCardList onClick={this.handleSelectedCourseItems} selectedCourses={this.state.selectedCourses} activeMenu={this.state.activeMenu}></CoursesCardList>\n        {this.state.showResults == 0 &&\n          <NavigatorBar activeButton={this.state.activeButton} onClick={this.handleNextButtonClick}></NavigatorBar>\n        }\n        {this.state.showResults == 1 &&\n          <div>\n            <h1>Your Menu</h1>\n            <AllergyInfo list={this.state.allergyList}></AllergyInfo>\n            <Results selectedCourses={this.state.selectedCourses}></Results>\n          </div>\n        }\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}